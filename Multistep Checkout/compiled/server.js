const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');

const app = express();

app.use(cors());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static('client'));

app.get('/', (req, res) => {
  console.log(req.body);
  res.send("hello, homo sapien!");
});

app.post('/create', (req, res) => {
  return User.create({}).then(users => {
    if (users) {
      console.log(users.id); //logged id e.g. 1
      res.send(users.id.toString());
    } else {
      res.status(400).send('Error creating a new record');
    }
  }).catch(err => {
    throw err;
  });
});

app.post('/update', (req, res) => {
  return User.update(req.body, {
    where: {
      id: req.body.id
    }
  }).then(data => {
    res.send('updated user account record');
  }).catch(err => {
    throw err;
  });
});

app.listen(5000, () => {
  console.log('Multistep Checkout App listening on port 5000!');
});

//database

const Sequelize = require('sequelize');
let db = new Sequelize('checkout', 'root', '', { host: 'localhost', dialect: 'mysql' });

let User = db.define('user', {
  name: Sequelize.STRING,
  email: Sequelize.STRING,
  password: Sequelize.STRING,
  shipToLine1: Sequelize.STRING,
  shipToLine2: Sequelize.STRING,
  shipToCity: Sequelize.STRING,
  shipToState: Sequelize.STRING,
  shipToZipcode: Sequelize.BIGINT,
  creditCardNumber: Sequelize.BIGINT,
  expiryDate: Sequelize.BIGINT,
  CVV: Sequelize.BIGINT,
  billingZipcode: Sequelize.BIGINT
}, {
  tableName: 'users',
  timestamps: false
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci5qcyJdLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsImNvcnMiLCJib2R5UGFyc2VyIiwiYXBwIiwidXNlIiwidXJsZW5jb2RlZCIsImV4dGVuZGVkIiwic3RhdGljIiwiZ2V0IiwicmVxIiwicmVzIiwiY29uc29sZSIsImxvZyIsImJvZHkiLCJzZW5kIiwicG9zdCIsIlVzZXIiLCJjcmVhdGUiLCJ0aGVuIiwidXNlcnMiLCJpZCIsInRvU3RyaW5nIiwic3RhdHVzIiwiY2F0Y2giLCJlcnIiLCJ1cGRhdGUiLCJ3aGVyZSIsImRhdGEiLCJsaXN0ZW4iLCJTZXF1ZWxpemUiLCJkYiIsImhvc3QiLCJkaWFsZWN0IiwiZGVmaW5lIiwibmFtZSIsIlNUUklORyIsImVtYWlsIiwicGFzc3dvcmQiLCJzaGlwVG9MaW5lMSIsInNoaXBUb0xpbmUyIiwic2hpcFRvQ2l0eSIsInNoaXBUb1N0YXRlIiwic2hpcFRvWmlwY29kZSIsIkJJR0lOVCIsImNyZWRpdENhcmROdW1iZXIiLCJleHBpcnlEYXRlIiwiQ1ZWIiwiYmlsbGluZ1ppcGNvZGUiLCJ0YWJsZU5hbWUiLCJ0aW1lc3RhbXBzIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxVQUFVQyxRQUFRLFNBQVIsQ0FBaEI7QUFDQSxNQUFNQyxPQUFPRCxRQUFRLE1BQVIsQ0FBYjtBQUNBLE1BQU1FLGFBQWFGLFFBQVEsYUFBUixDQUFuQjs7QUFFQSxNQUFNRyxNQUFNSixTQUFaOztBQUVBSSxJQUFJQyxHQUFKLENBQVFILE1BQVI7QUFDQUUsSUFBSUMsR0FBSixDQUFRRixXQUFXRyxVQUFYLENBQXNCLEVBQUVDLFVBQVUsSUFBWixFQUF0QixDQUFSO0FBQ0FILElBQUlDLEdBQUosQ0FBUUwsUUFBUVEsTUFBUixDQUFlLFFBQWYsQ0FBUjs7QUFFQUosSUFBSUssR0FBSixDQUFRLEdBQVIsRUFBYSxDQUFDQyxHQUFELEVBQU1DLEdBQU4sS0FBYztBQUN2QkMsVUFBUUMsR0FBUixDQUFZSCxJQUFJSSxJQUFoQjtBQUNBSCxNQUFJSSxJQUFKLENBQVMscUJBQVQ7QUFDSCxDQUhEOztBQUtBWCxJQUFJWSxJQUFKLENBQVMsU0FBVCxFQUFvQixDQUFDTixHQUFELEVBQU1DLEdBQU4sS0FBYztBQUNoQyxTQUFPTSxLQUFLQyxNQUFMLENBQVksRUFBWixFQUVOQyxJQUZNLENBRUFDLEtBQUQsSUFBVztBQUNmLFFBQUdBLEtBQUgsRUFBVTtBQUNSUixjQUFRQyxHQUFSLENBQVlPLE1BQU1DLEVBQWxCLEVBRFEsQ0FDYztBQUN0QlYsVUFBSUksSUFBSixDQUFTSyxNQUFNQyxFQUFOLENBQVNDLFFBQVQsRUFBVDtBQUNELEtBSEQsTUFHTztBQUNMWCxVQUFJWSxNQUFKLENBQVcsR0FBWCxFQUFnQlIsSUFBaEIsQ0FBcUIsNkJBQXJCO0FBQ0Q7QUFDRixHQVRNLEVBVU5TLEtBVk0sQ0FVQ0MsR0FBRCxJQUFTO0FBQ2QsVUFBTUEsR0FBTjtBQUNELEdBWk0sQ0FBUDtBQWFELENBZEQ7O0FBZ0JBckIsSUFBSVksSUFBSixDQUFTLFNBQVQsRUFBb0IsQ0FBQ04sR0FBRCxFQUFNQyxHQUFOLEtBQWM7QUFDaEMsU0FBT00sS0FBS1MsTUFBTCxDQUFZaEIsSUFBSUksSUFBaEIsRUFBc0I7QUFDM0JhLFdBQU87QUFDTE4sVUFBSVgsSUFBSUksSUFBSixDQUFTTztBQURSO0FBRG9CLEdBQXRCLEVBS05GLElBTE0sQ0FLQVMsSUFBRCxJQUFVO0FBQ2RqQixRQUFJSSxJQUFKLENBQVMsNkJBQVQ7QUFDRCxHQVBNLEVBUU5TLEtBUk0sQ0FRQ0MsR0FBRCxJQUFTO0FBQ2QsVUFBTUEsR0FBTjtBQUNELEdBVk0sQ0FBUDtBQVdELENBWkQ7O0FBY0FyQixJQUFJeUIsTUFBSixDQUFXLElBQVgsRUFBaUIsTUFBTTtBQUNuQmpCLFVBQVFDLEdBQVIsQ0FBWSxnREFBWjtBQUNILENBRkQ7O0FBSUE7O0FBRUEsTUFBTWlCLFlBQVk3QixRQUFRLFdBQVIsQ0FBbEI7QUFDQSxJQUFJOEIsS0FBSyxJQUFJRCxTQUFKLENBQWMsVUFBZCxFQUEwQixNQUExQixFQUFrQyxFQUFsQyxFQUFzQyxFQUFDRSxNQUFNLFdBQVAsRUFBb0JDLFNBQVMsT0FBN0IsRUFBdEMsQ0FBVDs7QUFFQSxJQUFJaEIsT0FBT2MsR0FBR0csTUFBSCxDQUFVLE1BQVYsRUFBa0I7QUFDM0JDLFFBQU1MLFVBQVVNLE1BRFc7QUFFM0JDLFNBQU9QLFVBQVVNLE1BRlU7QUFHM0JFLFlBQVVSLFVBQVVNLE1BSE87QUFJM0JHLGVBQWFULFVBQVVNLE1BSkk7QUFLM0JJLGVBQWFWLFVBQVVNLE1BTEk7QUFNM0JLLGNBQVlYLFVBQVVNLE1BTks7QUFPM0JNLGVBQWFaLFVBQVVNLE1BUEk7QUFRM0JPLGlCQUFlYixVQUFVYyxNQVJFO0FBUzNCQyxvQkFBa0JmLFVBQVVjLE1BVEQ7QUFVM0JFLGNBQVloQixVQUFVYyxNQVZLO0FBVzNCRyxPQUFLakIsVUFBVWMsTUFYWTtBQVkzQkksa0JBQWdCbEIsVUFBVWM7QUFaQyxDQUFsQixFQWFSO0FBQ0RLLGFBQVcsT0FEVjtBQUVEQyxjQUFZO0FBRlgsQ0FiUSxDQUFYIiwiZmlsZSI6InNlcnZlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJyk7XG5jb25zdCBjb3JzID0gcmVxdWlyZSgnY29ycycpO1xuY29uc3QgYm9keVBhcnNlciA9IHJlcXVpcmUoJ2JvZHktcGFyc2VyJyk7XG5cbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcblxuYXBwLnVzZShjb3JzKCkpO1xuYXBwLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoeyBleHRlbmRlZDogdHJ1ZSB9KSk7IFxuYXBwLnVzZShleHByZXNzLnN0YXRpYygnY2xpZW50JykpO1xuXG5hcHAuZ2V0KCcvJywgKHJlcSwgcmVzKSA9PiB7XG4gICAgY29uc29sZS5sb2cocmVxLmJvZHkpXG4gICAgcmVzLnNlbmQoXCJoZWxsbywgaG9tbyBzYXBpZW4hXCIpXG59KTtcblxuYXBwLnBvc3QoJy9jcmVhdGUnLCAocmVxLCByZXMpID0+IHtcbiAgcmV0dXJuIFVzZXIuY3JlYXRlKHtcbiAgfSlcbiAgLnRoZW4oKHVzZXJzKSA9PiB7XG4gICAgaWYodXNlcnMpIHtcbiAgICAgIGNvbnNvbGUubG9nKHVzZXJzLmlkKSAvL2xvZ2dlZCBpZCBlLmcuIDFcbiAgICAgIHJlcy5zZW5kKHVzZXJzLmlkLnRvU3RyaW5nKCkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcy5zdGF0dXMoNDAwKS5zZW5kKCdFcnJvciBjcmVhdGluZyBhIG5ldyByZWNvcmQnKVxuICAgIH1cbiAgfSlcbiAgLmNhdGNoKChlcnIpID0+IHtcbiAgICB0aHJvdyBlcnI7XG4gIH0pXG59KTtcblxuYXBwLnBvc3QoJy91cGRhdGUnLCAocmVxLCByZXMpID0+IHtcbiAgcmV0dXJuIFVzZXIudXBkYXRlKHJlcS5ib2R5LCB7XG4gICAgd2hlcmU6IHtcbiAgICAgIGlkOiByZXEuYm9keS5pZFxuICAgIH1cbiAgfSlcbiAgLnRoZW4oKGRhdGEpID0+IHtcbiAgICByZXMuc2VuZCgndXBkYXRlZCB1c2VyIGFjY291bnQgcmVjb3JkJylcbiAgfSlcbiAgLmNhdGNoKChlcnIpID0+IHtcbiAgICB0aHJvdyBlcnI7XG4gIH0pXG59KTtcblxuYXBwLmxpc3Rlbig1MDAwLCAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ011bHRpc3RlcCBDaGVja291dCBBcHAgbGlzdGVuaW5nIG9uIHBvcnQgNTAwMCEnKVxufSk7XG5cbi8vZGF0YWJhc2VcblxuY29uc3QgU2VxdWVsaXplID0gcmVxdWlyZSgnc2VxdWVsaXplJyk7XG5sZXQgZGIgPSBuZXcgU2VxdWVsaXplKCdjaGVja291dCcsICdyb290JywgJycsIHtob3N0OiAnbG9jYWxob3N0JywgZGlhbGVjdDogJ215c3FsJ30pO1xuXG5sZXQgVXNlciA9IGRiLmRlZmluZSgndXNlcicsIHtcbiAgbmFtZTogU2VxdWVsaXplLlNUUklORyxcbiAgZW1haWw6IFNlcXVlbGl6ZS5TVFJJTkcsXG4gIHBhc3N3b3JkOiBTZXF1ZWxpemUuU1RSSU5HLFxuICBzaGlwVG9MaW5lMTogU2VxdWVsaXplLlNUUklORyxcbiAgc2hpcFRvTGluZTI6IFNlcXVlbGl6ZS5TVFJJTkcsXG4gIHNoaXBUb0NpdHk6IFNlcXVlbGl6ZS5TVFJJTkcsXG4gIHNoaXBUb1N0YXRlOiBTZXF1ZWxpemUuU1RSSU5HLFxuICBzaGlwVG9aaXBjb2RlOiBTZXF1ZWxpemUuQklHSU5ULFxuICBjcmVkaXRDYXJkTnVtYmVyOiBTZXF1ZWxpemUuQklHSU5ULFxuICBleHBpcnlEYXRlOiBTZXF1ZWxpemUuQklHSU5ULFxuICBDVlY6IFNlcXVlbGl6ZS5CSUdJTlQsXG4gIGJpbGxpbmdaaXBjb2RlOiBTZXF1ZWxpemUuQklHSU5UXG59LCB7XG4gIHRhYmxlTmFtZTogJ3VzZXJzJyxcbiAgdGltZXN0YW1wczogZmFsc2Vcbn0pO1xuXG4iXX0=